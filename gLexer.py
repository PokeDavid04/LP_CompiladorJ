# Generated from g.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,32,166,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,1,0,1,
        0,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,7,1,
        7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,
        14,1,14,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,19,1,
        19,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,
        25,1,25,1,25,1,26,1,26,5,26,128,8,26,10,26,12,26,131,9,26,1,27,4,
        27,134,8,27,11,27,12,27,135,1,28,1,28,1,28,1,29,1,29,1,30,1,30,1,
        30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,
        30,158,8,30,1,31,4,31,161,8,31,11,31,12,31,162,1,31,1,31,0,0,32,
        1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
        27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
        49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,1,0,10,2,0,65,90,
        97,122,3,0,48,57,65,90,97,122,1,0,48,57,5,0,224,225,231,233,236,
        237,241,243,249,250,6,0,37,37,42,43,45,45,61,61,94,94,124,124,2,
        0,60,60,62,62,4,0,35,35,44,44,93,93,123,123,3,0,47,47,58,58,126,
        126,2,0,45,46,95,95,3,0,9,9,13,13,32,32,177,0,1,1,0,0,0,0,3,1,0,
        0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
        0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,
        0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
        0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,
        0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,
        0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,
        0,1,65,1,0,0,0,3,67,1,0,0,0,5,70,1,0,0,0,7,72,1,0,0,0,9,74,1,0,0,
        0,11,76,1,0,0,0,13,79,1,0,0,0,15,81,1,0,0,0,17,83,1,0,0,0,19,85,
        1,0,0,0,21,87,1,0,0,0,23,89,1,0,0,0,25,91,1,0,0,0,27,93,1,0,0,0,
        29,96,1,0,0,0,31,98,1,0,0,0,33,100,1,0,0,0,35,103,1,0,0,0,37,106,
        1,0,0,0,39,108,1,0,0,0,41,110,1,0,0,0,43,112,1,0,0,0,45,115,1,0,
        0,0,47,117,1,0,0,0,49,119,1,0,0,0,51,121,1,0,0,0,53,125,1,0,0,0,
        55,133,1,0,0,0,57,137,1,0,0,0,59,140,1,0,0,0,61,157,1,0,0,0,63,160,
        1,0,0,0,65,66,5,10,0,0,66,2,1,0,0,0,67,68,5,61,0,0,68,69,5,58,0,
        0,69,4,1,0,0,0,70,71,5,40,0,0,71,6,1,0,0,0,72,73,5,41,0,0,73,8,1,
        0,0,0,74,75,5,35,0,0,75,10,1,0,0,0,76,77,5,64,0,0,77,78,5,58,0,0,
        78,12,1,0,0,0,79,80,5,43,0,0,80,14,1,0,0,0,81,82,5,45,0,0,82,16,
        1,0,0,0,83,84,5,42,0,0,84,18,1,0,0,0,85,86,5,37,0,0,86,20,1,0,0,
        0,87,88,5,94,0,0,88,22,1,0,0,0,89,90,5,124,0,0,90,24,1,0,0,0,91,
        92,5,61,0,0,92,26,1,0,0,0,93,94,5,60,0,0,94,95,5,62,0,0,95,28,1,
        0,0,0,96,97,5,60,0,0,97,30,1,0,0,0,98,99,5,62,0,0,99,32,1,0,0,0,
        100,101,5,60,0,0,101,102,5,61,0,0,102,34,1,0,0,0,103,104,5,62,0,
        0,104,105,5,61,0,0,105,36,1,0,0,0,106,107,5,44,0,0,107,38,1,0,0,
        0,108,109,5,123,0,0,109,40,1,0,0,0,110,111,5,93,0,0,111,42,1,0,0,
        0,112,113,5,105,0,0,113,114,5,46,0,0,114,44,1,0,0,0,115,116,5,126,
        0,0,116,46,1,0,0,0,117,118,5,58,0,0,118,48,1,0,0,0,119,120,5,47,
        0,0,120,50,1,0,0,0,121,122,5,78,0,0,122,123,5,66,0,0,123,124,5,46,
        0,0,124,52,1,0,0,0,125,129,7,0,0,0,126,128,7,1,0,0,127,126,1,0,0,
        0,128,131,1,0,0,0,129,127,1,0,0,0,129,130,1,0,0,0,130,54,1,0,0,0,
        131,129,1,0,0,0,132,134,7,2,0,0,133,132,1,0,0,0,134,135,1,0,0,0,
        135,133,1,0,0,0,135,136,1,0,0,0,136,56,1,0,0,0,137,138,5,95,0,0,
        138,139,3,55,27,0,139,58,1,0,0,0,140,141,7,3,0,0,141,60,1,0,0,0,
        142,158,7,4,0,0,143,144,5,60,0,0,144,158,5,62,0,0,145,158,7,5,0,
        0,146,147,5,60,0,0,147,158,5,61,0,0,148,149,5,62,0,0,149,158,5,61,
        0,0,150,158,7,6,0,0,151,152,5,105,0,0,152,158,5,46,0,0,153,158,7,
        7,0,0,154,155,5,64,0,0,155,158,5,58,0,0,156,158,7,8,0,0,157,142,
        1,0,0,0,157,143,1,0,0,0,157,145,1,0,0,0,157,146,1,0,0,0,157,148,
        1,0,0,0,157,150,1,0,0,0,157,151,1,0,0,0,157,153,1,0,0,0,157,154,
        1,0,0,0,157,156,1,0,0,0,158,62,1,0,0,0,159,161,7,9,0,0,160,159,1,
        0,0,0,161,162,1,0,0,0,162,160,1,0,0,0,162,163,1,0,0,0,163,164,1,
        0,0,0,164,165,6,31,0,0,165,64,1,0,0,0,5,0,129,135,157,162,1,6,0,
        0
    ]

class gLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    ID = 27
    NUM = 28
    NUM_NEG = 29
    ACC = 30
    SIMB = 31
    WS = 32

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'\\n'", "'=:'", "'('", "')'", "'#'", "'@:'", "'+'", "'-'", 
            "'*'", "'%'", "'^'", "'|'", "'='", "'<>'", "'<'", "'>'", "'<='", 
            "'>='", "','", "'{'", "']'", "'i.'", "'~'", "':'", "'/'", "'NB.'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "NUM", "NUM_NEG", "ACC", "SIMB", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "ID", "NUM", "NUM_NEG", "ACC", "SIMB", "WS" ]

    grammarFileName = "g.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


